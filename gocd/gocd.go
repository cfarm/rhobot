package gocd

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

type PipelineConfig struct {
	Group    string   `json:"group"`
	Pipeline Pipeline `json:"pipeline"`
}

type Pipeline struct {
	LabelTemplate         string        `json:"label_template"`
	EnablePipelineLocking bool          `json:"enable_pipeline_locking"`
	Name                  string        `json:"name"`
	Template              interface{}   `json:"template"`
	Parameters            []interface{} `json:"parameters"`
	EnvironmentVariables  []struct {
		Secure bool   `json:"secure"`
		Name   string `json:"name"`
		Value  string `json:"value"`
	} `json:"environment_variables"`
	Materials []struct {
		Type       string `json:"type"`
		Attributes struct {
			URL             string      `json:"url"`
			Destination     string      `json:"destination"`
			Filter          interface{} `json:"filter"`
			Name            interface{} `json:"name"`
			AutoUpdate      bool        `json:"auto_update"`
			Branch          string      `json:"branch"`
			SubmoduleFolder interface{} `json:"submodule_folder"`
		} `json:"attributes"`
	} `json:"materials"`
	Stages []struct {
		Name                  string `json:"name"`
		FetchMaterials        bool   `json:"fetch_materials"`
		CleanWorkingDirectory bool   `json:"clean_working_directory"`
		NeverCleanupArtifacts bool   `json:"never_cleanup_artifacts"`
		Approval              struct {
			Type          string `json:"type"`
			Authorization struct {
				Roles []interface{} `json:"roles"`
				Users []interface{} `json:"users"`
			} `json:"authorization"`
		} `json:"approval"`
		EnvironmentVariables []interface{} `json:"environment_variables"`
		Jobs                 []struct {
			Name                 string        `json:"name"`
			RunInstanceCount     interface{}   `json:"run_instance_count"`
			Timeout              interface{}   `json:"timeout"`
			EnvironmentVariables []interface{} `json:"environment_variables"`
			Resources            []interface{} `json:"resources"`
			Tasks                []struct {
				Type       string `json:"type"`
				Attributes struct {
					RunIf            []string    `json:"run_if"`
					OnCancel         interface{} `json:"on_cancel"`
					Command          string      `json:"command"`
					Arguments        []string    `json:"arguments"`
					WorkingDirectory string      `json:"working_directory"`
				} `json:"attributes"`
			} `json:"tasks"`
			Tabs       []interface{} `json:"tabs"`
			Artifacts  []interface{} `json:"artifacts"`
			Properties interface{}   `json:"properties"`
		} `json:"jobs"`
	} `json:"stages"`
	TrackingTool interface{} `json:"tracking_tool"`
	Timer        interface{} `json:"timer"`
}

func unmarshalPipeline(data []byte) (pipeline Pipeline, err error) {
	err = json.Unmarshal(data, &pipeline)
	if err != nil {
		return pipeline, err
	}
	return pipeline, nil
}

func unmarshalPipelineConfig(data []byte) (pipelineConfig PipelineConfig, err error) {
	err = json.Unmarshal(data, &pipelineConfig)
	if err != nil {
		return pipelineConfig, err
	}
	return pipelineConfig, nil
}

func ReadPipelineJSONFromFile(path string) (pipeline Pipeline, err error) {
	data, err := ioutil.ReadFile(path)
	if err != nil {
		return pipeline, err
	}
	return unmarshalPipeline(data)
}

func pipelineConfigPOST(gocdULR string, pipelineConfig PipelineConfig) (pipeline Pipeline, err error) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	payloadBytes, err := json.Marshal(pipelineConfig)
	if err != nil {
		return pipeline, err
	}
	payloadBody := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", gocdULR+"/go/api/admin/pipelines", payloadBody)
	if err != nil {
		return pipeline, err
	}
	user := os.Getenv("GOCDUSER")
	pass := os.Getenv("GOCDPASSWORD")
	req.SetBasicAuth(user, pass)
	req.Header.Set("Accept", "application/vnd.go.cd.v1+json")
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return pipeline, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return pipeline, err
	}

	var prettyJSON bytes.Buffer
	err = json.Indent(&prettyJSON, body, "", "\t")
	if err != nil {
		return pipeline, err
	}
	//fmt.Println("pipelineConfigPOST:", string(prettyJSON.Bytes()))

	return unmarshalPipeline(body)
}

func pipelineGET(gocdULR string, pipelineName string) (pipeline Pipeline, err error) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", gocdULR+"/go/api/admin/pipelines/"+pipelineName, nil)
	if err != nil {
		return pipeline, err
	}
	user := os.Getenv("GOCDUSER")
	pass := os.Getenv("GOCDPASSWORD")
	req.SetBasicAuth(user, pass)
	req.Header.Set("Accept", "application/vnd.go.cd.v1+json")
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return pipeline, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return pipeline, err
	}

	var prettyJSON bytes.Buffer
	err = json.Indent(&prettyJSON, body, "", "\t")
	if err != nil {
		return pipeline, err
	}
	//fmt.Println("pipelineConfigGET:", string(prettyJSON.Bytes()))

	return unmarshalPipeline(body)
}

func Push(gocdULR string, path string, group string) {

	pipeline, err := ReadPipelineJSONFromFile(path)
	check(err)
	pipelineConfig := PipelineConfig{group, pipeline}
	_, err = pipelineConfigPOST(gocdULR, pipelineConfig)
	check(err)
}

func Pull(gocdULR string, path string) {

	pipeline, err := ReadPipelineJSONFromFile(path)
	check(err)
	name := pipeline.Name

	Clone(gocdULR , path , name )
}

func Clone(gocdULR string, path string, name string) {

	pipelineFetched, err := pipelineGET(gocdULR, name)
	check(err)
	pipelineJSON, _ := json.MarshalIndent(pipelineFetched,"", "    ")
	err = ioutil.WriteFile(path, pipelineJSON, 0666)
	check(err)
}

func check(e error) {
	if e != nil {
		fmt.Println(e)
		panic(e)
	}
}
